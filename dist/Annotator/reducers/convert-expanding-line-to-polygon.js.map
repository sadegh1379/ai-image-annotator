{"version":3,"file":"convert-expanding-line-to-polygon.js","names":["_objectSpread","_slicedToArray","clamp","num","min","max","expandingLine","expandingWidth","pointPairs","points","map","_ref","i","x","y","angle","width","n","length","p","Math","atan2","PI","dx","sin","dy","cos","firstSection","_ref2","_ref3","p1","p2","secondSection","_ref4","_ref5","asMutable","reverse","newPoints","concat","_ref6","type","open","unfinished","undefined","candidatePoint"],"sources":["../../../src/Annotator/reducers/convert-expanding-line-to-polygon.js"],"sourcesContent":["import _objectSpread from '@babel/runtime/helpers/esm/objectSpread'\nimport _slicedToArray from '@babel/runtime/helpers/esm/slicedToArray'\n\nfunction clamp(num, min, max) {\n\treturn num <= min ? min : num >= max ? max : num\n}\n\nexport default (function (expandingLine) {\n\tvar expandingWidth = expandingLine.expandingWidth || 0.005\n\tvar pointPairs = expandingLine.points.map(function (_ref, i) {\n\t\tvar x = _ref.x,\n\t\t\ty = _ref.y,\n\t\t\tangle = _ref.angle,\n\t\t\twidth = _ref.width\n\n\t\tif (!angle) {\n\t\t\tvar n = expandingLine.points[clamp(i + 1, 0, expandingLine.points.length - 1)]\n\t\t\tvar p = expandingLine.points[clamp(i - 1, 0, expandingLine.points.length - 1)]\n\t\t\tangle = Math.atan2(p.x - n.x, p.y - n.y) + Math.PI / 2\n\t\t}\n\n\t\tvar dx = Math.sin(angle) * (width || expandingWidth) / 2\n\t\tvar dy = Math.cos(angle) * (width || expandingWidth) / 2\n\t\treturn [{\n\t\t\tx: x + dx,\n\t\t\ty: y + dy\n\t\t}, {\n\t\t\tx: x - dx,\n\t\t\ty: y - dy\n\t\t}]\n\t})\n\tvar firstSection = pointPairs.map(function (_ref2) {\n\t\tvar _ref3 = _slicedToArray(_ref2, 2),\n\t\t\tp1 = _ref3[0],\n\t\t\tp2 = _ref3[1]\n\n\t\treturn p1\n\t})\n\tvar secondSection = pointPairs.map(function (_ref4) {\n\t\tvar _ref5 = _slicedToArray(_ref4, 2),\n\t\t\tp1 = _ref5[0],\n\t\t\tp2 = _ref5[1]\n\n\t\treturn p2\n\t}).asMutable()\n\tsecondSection.reverse()\n\tvar newPoints = firstSection.concat(secondSection).map(function (_ref6) {\n\t\tvar x = _ref6.x,\n\t\t\ty = _ref6.y\n\t\treturn [x, y]\n\t})\n\treturn _objectSpread({}, expandingLine, {\n\t\ttype: 'polygon',\n\t\topen: false,\n\t\tpoints: newPoints,\n\t\tunfinished: undefined,\n\t\tcandidatePoint: undefined // let { expandingWidth = 0.005, points } = region\n    // expandingWidth = points.slice(-1)[0].width || expandingWidth\n    // const lastPoint = points.slice(-1)[0]\n    // return (\n    //   <>\n    //     <polygon\n    //       points={\n    //         .map((p) => `${p.x * iw} ${p.y * ih}`)\n    //         .join(\" \")}\n    // return {\n    //   ...expandingLine,\n    //   unfinished: undefined,\n    //   candidatePoint: undefined,\n    // }\n\n\t})\n})"],"mappings":"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"}